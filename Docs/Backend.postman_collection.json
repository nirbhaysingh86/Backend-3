{
	"info": {
		"_postman_id": "d3957a8b-23eb-4783-93ce-2fa5aee5b330",
		"name": "Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "POST /auth/login",
					"item": [
						{
							"name": "login with Site Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);\r",
											"// set token in environment to be used later\r",
											"pm.environment.set('token', pm.response.json().token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"johndoe\",\r\n  \"password\": \"123456789\",\r\n  \"server\": \"{{server}}\",\r\n  \"dbName\": \"{{dbName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with Account Management",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);\r",
											"// set token in environment to be used later\r",
											"pm.environment.set('token', pm.response.json().token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"mike\",\r\n  \"password\": \"12345\",\r\n   \"server\": \"{{server}}\",\r\n  \"dbName\": \"{{dbName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with invalid Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"normal\",\r\n  \"password\": \"12345\",\r\n   \"server\": \"{{server}}\",\r\n  \"dbName\": \"{{dbName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with null Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Test Username\",\r\n  \"password\": \"809711511511911111410049505152\",\r\n   \"server\": \"{{server}}\",\r\n  \"dbName\": \"{{dbName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with invalid dbServer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"johndoe\",\r\n  \"password\": \"123456789\",\r\n  \"server\": \"{{server}}Error\",\r\n  \"dbName\": \"{{dbName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with invalid dbName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"johndoe\",\r\n  \"password\": \"123456789\",\r\n  \"server\": \"{{server}}\",\r\n  \"dbName\": \"{{dbName}}Error\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"\",\r\n  \"password\": \"\",\r\n  \"server\": \"\",\r\n  \"dbName\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with too long userName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"toolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstring\",\r\n  \"password\": \"123456789\",\r\n  \"server\": \"{{server}}\",\r\n  \"dbName\": \"{{dbName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with too long password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// output request body to find out issues\r",
											"pm.test(pm.request.body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"toolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstring\",\r\n  \"username\": \"johndoe\",\r\n  \"server\": \"{{server}}\",\r\n  \"dbName\": \"{{dbName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Configuration",
			"item": [
				{
					"name": "GET /configuration/worklist/columns",
					"item": [
						{
							"name": "/configuration/worklist/columns",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/configuration/worklist/columns",
									"host": [
										"{{url}}"
									],
									"path": [
										"configuration",
										"worklist",
										"columns"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configuration/worklist/columns without jwt token",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/configuration/worklist/columns",
									"host": [
										"{{url}}"
									],
									"path": [
										"configuration",
										"worklist",
										"columns"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configuration/worklist/columns with wrong basic auth token",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "test",
											"type": "string"
										},
										{
											"key": "username",
											"value": "test",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/configuration/worklist/columns",
									"host": [
										"{{url}}"
									],
									"path": [
										"configuration",
										"worklist",
										"columns"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configuration/worklist/columns with expired Token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/configuration/worklist/columns",
									"host": [
										"{{url}}"
									],
									"path": [
										"configuration",
										"worklist",
										"columns"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configuration/worklist/columns with invalidDB Token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidDBToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/configuration/worklist/columns",
									"host": [
										"{{url}}"
									],
									"path": [
										"configuration",
										"worklist",
										"columns"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /configuration/defaultViewLimits",
					"item": [
						{
							"name": "/configuration/defaultViewLimits",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/configuration/defaultViewLimits",
									"host": [
										"{{url}}"
									],
									"path": [
										"configuration",
										"defaultViewLimits"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Lookup",
			"item": [
				{
					"name": "GET /lookup/revCptCodes",
					"item": [
						{
							"name": "/lookup/revCptCodes",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/revCptCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"revCptCodes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /lookup/icdCodes",
					"item": [
						{
							"name": "/lookup/icdCodes",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/icdCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"icdCodes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /lookup/systemValues",
					"item": [
						{
							"name": "/lookup/systemValues with null codeType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									]
								}
							},
							"response": []
						},
						{
							"name": "/lookup/systemValues with empty codeType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues?codeType=",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									],
									"query": [
										{
											"key": "codeType",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/lookup/systemValues with AMAuditorType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues?codeType=AMAuditorType",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									],
									"query": [
										{
											"key": "codeType",
											"value": "AMAuditorType"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/lookup/systemValues with AMFollowUpType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues?codeType=AMFollowUpType",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									],
									"query": [
										{
											"key": "codeType",
											"value": "AMFollowUpType"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/lookup/systemValues with AMRecordAgeType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues?codeType=AMRecordAgeType",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									],
									"query": [
										{
											"key": "codeType",
											"value": "AMRecordAgeType"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/lookup/systemValues with AMRecordHiddenType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues?codeType=AMRecordHiddenType",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									],
									"query": [
										{
											"key": "codeType",
											"value": "AMRecordHiddenType"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/lookup/systemValues with AMStatusType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues?codeType=AMStatusType",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									],
									"query": [
										{
											"key": "codeType",
											"value": "AMStatusType"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/lookup/systemValues with invalid codeType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/lookup/systemValues?codeType=invalid",
									"host": [
										"{{url}}"
									],
									"path": [
										"lookup",
										"systemValues"
									],
									"query": [
										{
											"key": "codeType",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Views",
			"item": [
				{
					"name": "POST /views",
					"item": [
						{
							"name": "/views",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json().id){\r",
											"   pm.environment.set('viewId', pm.response.json().id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"new222222\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 2,\r\n            \"followUp\": 3,\r\n            \"status\": 1,\r\n            \"accountAge\": 5,\r\n            \"hiddenRecords\": 1\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with exist name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"All Name\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 2,\r\n            \"followUp\": 3,\r\n            \"status\": 1,\r\n            \"accountAge\": 5,\r\n            \"hiddenRecords\": 1\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with long name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"toolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstringtoolongstring\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 2,\r\n            \"followUp\": 3,\r\n            \"status\": 1,\r\n            \"accountAge\": 5,\r\n            \"hiddenRecords\": 1\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with invalid auditor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"invalid auditor\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 99,\r\n            \"followUp\": 3,\r\n            \"status\": 1,\r\n            \"accountAge\": 5,\r\n            \"hiddenRecords\": 1\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with invalid followup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"invalid followUp\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 2,\r\n            \"followUp\": 33,\r\n            \"status\": 1,\r\n            \"accountAge\": 5,\r\n            \"hiddenRecords\": 1\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with invalid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"invalid status\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 2,\r\n            \"followUp\": 3,\r\n            \"status\": 111,\r\n            \"accountAge\": 5,\r\n            \"hiddenRecords\": 1\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with invalid accountAge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"invalid accountAge\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 2,\r\n            \"followUp\": 3,\r\n            \"status\": 1,\r\n            \"accountAge\": 55,\r\n            \"hiddenRecords\": 1\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "create view with invalid hiddenRecords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"name\": \"invalid hiddenRecords\",\r\n        \"description\": \"desc2\",\r\n        \"limits\": {\r\n            \"auditor\": 2,\r\n            \"followUp\": 3,\r\n            \"status\": 1,\r\n            \"accountAge\": 5,\r\n            \"hiddenRecords\": 11\r\n        },\r\n        \"isDefault\": true\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /views/{viewId}",
					"item": [
						{
							"name": "/views/{viewId}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new name222\",\r\n    \"description\": \"new desc\",\r\n    \"limits\": {\r\n        \"auditor\": 2,\r\n        \"followUp\": 4,\r\n        \"status\":1,\r\n        \"accountAge\": 5,\r\n        \"hiddenRecords\": 0\r\n    },\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with not owned views",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"new name\",\r\n    \"description\": \"new desc\",\r\n    \"limits\": {\r\n        \"auditor\": 1,\r\n        \"followUp\": 1,\r\n        \"status\":1,\r\n        \"accountAge\": 1,\r\n        \"hiddenRecords\": 1\r\n    },\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with not found views",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"new name\",\r\n    \"description\": \"new desc\",\r\n    \"limits\": {\r\n        \"auditor\": 1,\r\n        \"followUp\": 1,\r\n        \"status\":1,\r\n        \"accountAge\": 1,\r\n        \"hiddenRecords\": 1\r\n    },\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/999999",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with negative id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"new name\",\r\n    \"description\": \"new desc\",\r\n    \"limits\": {\r\n        \"auditor\": 1,\r\n        \"followUp\": 1,\r\n        \"status\":1,\r\n        \"accountAge\": 1,\r\n        \"hiddenRecords\": 1\r\n    },\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/-2",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-2"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with exist name",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"All Name\",\r\n    \"description\": \"new desc\",\r\n    \"limits\": {\r\n        \"auditor\": 1,\r\n        \"followUp\": 1,\r\n        \"status\":1,\r\n        \"accountAge\": 1,\r\n        \"hiddenRecords\": 1\r\n    },\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with invalid auditor",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"invalid auditor\",\r\n    \"description\": \"new desc\",\r\n    \"limits\": {\r\n        \"auditor\": 11,\r\n        \"followUp\": 1,\r\n        \"status\":1,\r\n        \"accountAge\": 1,\r\n        \"hiddenRecords\": 1\r\n    },\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /views",
					"item": [
						{
							"name": "/views",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views",
									"host": [
										"{{url}}"
									],
									"path": [
										"views"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /views/fields",
					"item": [
						{
							"name": "/views/fields",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /views/fields/{fieldId}/values",
					"item": [
						{
							"name": "ServiceCode field values",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/4/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"4",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payer1AuditFlag field values",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/27/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"27",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatFinClass field values",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/108/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"108",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "BillType field values",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/251/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"251",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "DischargeCodeLink field values",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/179/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"179",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "not found field id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/999999/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"999999",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "not values selection type",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/5/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"5",
										"values"
									]
								}
							},
							"response": []
						},
						{
							"name": "negative id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/fields/-5/values",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"fields",
										"-5",
										"values"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /views/{viewId}",
					"item": [
						{
							"name": "/views/{viewId}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get view with not owner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get view with negative id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get view with not found id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/9999",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE /views/{viewId}",
					"item": [
						{
							"name": "/views/{viewId}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete view with not owner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete view with not found id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/1111111",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1111111"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete view with negative id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/-1111111",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-1111111"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /views/{viewId}/rules",
					"item": [
						{
							"name": "/views/{viewId}/rules",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "ComboCodeType Example rules",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/4/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"4",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rules with not owner",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/1/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rules with not found view",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/11111111/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"11111111",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rules with negative view id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/-11111111/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-11111111",
										"rules"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /views/{viewId}/rules/{ruleId}",
					"item": [
						{
							"name": "/views/{viewId}/rules/{ruleId}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rule with not owner view",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/1/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rule with not found view id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/11111/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"11111",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rule with nagative view id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/-11111/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-11111",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rule with nagative rule id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get rule with not found rule id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/111111",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"111111"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE /views/{viewId}/rules/{ruleId}",
					"item": [
						{
							"name": "/views/{viewId}/rules/{ruleId}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete rule with not owner view",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/1/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete rule with not found view id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/11111/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"11111",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete rule with negative view id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/-11111/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-11111",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete rule with negative rule id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete rule with not found rule id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/111111",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"111111"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /views/{viewId}/rules/{ruleId}",
					"item": [
						{
							"name": "/views/{viewId}/rules/{ruleId}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"fieldId\": 5,\r\n        \"beginRange\": \"01/01/2021\",\r\n        \"endRange\": \"12/31/2021\",\r\n        \"operand\": \"BETWEEN\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update rule with not owner view",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"fieldId\": 5,\r\n        \"beginRange\": \"01/01/2021\",\r\n        \"endRange\": \"12/31/2021\",\r\n        \"operand\": \"BETWEEN\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/1/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update rule with not found view id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"fieldId\": 5,\r\n        \"beginRange\": \"01/01/2021\",\r\n        \"endRange\": \"12/31/2021\",\r\n        \"operand\": \"BETWEEN\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/111111/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"111111",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update rule with negative view id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"fieldId\": 5,\r\n        \"beginRange\": \"01/01/2021\",\r\n        \"endRange\": \"12/31/2021\",\r\n        \"operand\": \"BETWEEN\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/-111111/rules/{{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-111111",
										"rules",
										"{{ruleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update rule with negative rule id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"fieldId\": 5,\r\n        \"beginRange\": \"01/01/2021\",\r\n        \"endRange\": \"12/31/2021\",\r\n        \"operand\": \"BETWEEN\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update rule with not found rule id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"fieldId\": 5,\r\n        \"beginRange\": \"01/01/2021\",\r\n        \"endRange\": \"12/31/2021\",\r\n        \"operand\": \"BETWEEN\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules/111111",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules",
										"111111"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /views/{viewId}/rules",
					"item": [
						{
							"name": "ServiceCode ComboCodeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Inpatient\",\r\n  \"valueId\": \"201\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payer1AuditFlag ComboCodeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 27,\r\n  \"value\": \"Pending\",\r\n  \"valueId\": \"168\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatFinClass ComboCodeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 108,\r\n  \"value\": \"Blue Cross Blue Shield\",\r\n  \"valueId\": \"105\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "BillType ComboCodeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 251,\r\n  \"value\": \"111\",\r\n  \"valueId\": \"27\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatTypeCodeLink ComboCodeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 18,\r\n  \"value\": \"EMERGENCY\",\r\n  \"valueId\": \"133\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 18,\r\n  \"value\": \"Day Surgery\",\r\n  \"valueId\": \"157\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 18,\r\n  \"value\": \"FERTILITY\",\r\n  \"valueId\": \"154\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "DischargeCodeLink ComboCodeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 179,\r\n  \"value\": \"1959-DC TO HOME OR SELF CARE (RO DISCHA)\",\r\n  \"valueId\": \"52\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "ComboCodeType values rule Invalid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Invalid\",\r\n  \"valueId\": \"201\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "ComboCodeType values rule Invalid valueId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Inpatient\",\r\n  \"valueId\": \"-1\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "multi ServiceCode ComboCodeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Inpatient\",\r\n  \"valueId\": \"201\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Outpatient\",\r\n  \"valueId\": \"202\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "multi rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 5,\r\n  \"beginRange\": \"01/01/1900\",\r\n  \"endRange\": \"12/31/1986\",\r\n  \"operand\": \"BETWEEN\"\r\n},{\r\n  \"fieldId\": 72,\r\n  \"beginRange\": \"01/01/1900 11:00\",\r\n  \"endRange\": \"12/31/1986 23:00\",\r\n  \"operand\": \"BETWEEN\"\r\n},{\r\n  \"fieldId\": 11,\r\n  \"value\": \"0\",\r\n  \"operand\": \">\"\r\n},{\r\n  \"fieldId\": 35,\r\n  \"value\": \"19.22\",\r\n  \"operand\": \">\"\r\n},{\r\n  \"fieldId\": 19,\r\n  \"value\": \"start\",\r\n  \"operand\": \"BEGINS WITH\"\r\n},{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Inpatient\",\r\n  \"valueId\": \"201\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Outpatient\",\r\n  \"valueId\": \"202\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 27,\r\n  \"value\": \"Pending\",\r\n  \"valueId\": \"168\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 27,\r\n  \"value\": \"Closed\",\r\n  \"valueId\": \"181\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 27,\r\n  \"value\": \"Internal Review\",\r\n  \"valueId\": \"169\",\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "multi rules using client sql",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Inpatient\",\r\n  \"valueId\": \"201\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 4,\r\n  \"value\": \"Outpatient\",\r\n  \"valueId\": \"202\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 27,\r\n  \"value\": \"Pending\",\r\n  \"valueId\": \"168\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 27,\r\n  \"value\": \"Closed\",\r\n  \"valueId\": \"181\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 27,\r\n  \"value\": \"Internal Review\",\r\n  \"valueId\": \"169\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 108,\r\n  \"value\": \"Blue Cross Blue Shield\",\r\n  \"valueId\": \"105\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 108,\r\n  \"value\": \"Aetna\",\r\n  \"valueId\": \"107\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 108,\r\n  \"value\": \"Cigna\",\r\n  \"valueId\": \"108\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 251,\r\n  \"value\": \"111\",\r\n  \"valueId\": \"27\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 251,\r\n  \"value\": \"115\",\r\n  \"valueId\": \"31\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 251,\r\n  \"value\": \"132\",\r\n  \"valueId\": \"36\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 18,\r\n  \"value\": \"EMERGENCY\",\r\n  \"valueId\": \"133\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 18,\r\n  \"value\": \"Day Surgery\",\r\n  \"valueId\": \"157\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 18,\r\n  \"value\": \"FERTILITY\",\r\n  \"valueId\": \"154\",\r\n  \"operand\":\"IN\"\r\n},{\r\n  \"fieldId\": 5,\r\n  \"beginRange\": \"09/13/2020\",\r\n  \"endRange\": \"09/13/2020\",\r\n  \"operand\":\"BETWEEN\"\r\n},{\r\n  \"fieldId\": 35,\r\n  \"value\": \"0.1\",\r\n  \"operand\":\">\"\r\n},{\r\n  \"fieldId\": 58,\r\n  \"value\": \"10000\",\r\n  \"operand\":\">\"\r\n},{\r\n  \"fieldId\": 84,\r\n  \"value\": \"A\",\r\n  \"operand\":\"BEGINS WITH\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "DateRange rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 5,\r\n  \"beginRange\": \"01/01/1900\",\r\n  \"endRange\": \"12/31/1986\",\r\n  \"operand\": \"BETWEEN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "DateRange rule with invalid beginRange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 5,\r\n  \"beginRange\": \"1900-01-01\",\r\n  \"endRange\": \"12/31/1986\",\r\n  \"operand\": \"BETWEEN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "DateRange rule with  beginRange>endRange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 5,\r\n  \"beginRange\": \"12/31/1996\",\r\n  \"endRange\": \"12/31/1986\",\r\n  \"operand\": \"BETWEEN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "DateTimeRange rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 72,\r\n  \"beginRange\": \"01/01/1900 11:00\",\r\n  \"endRange\": \"12/31/1986 23:00\",\r\n  \"operand\": \"BETWEEN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "DateTimeRange rule with invalid endRange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 72,\r\n  \"beginRange\": \"01/01/1900 11:00\",\r\n  \"endRange\": \"12/31/1986 26:00\",\r\n  \"operand\": \"BETWEEN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Number rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " [{\r\n  \"fieldId\": 11,\r\n  \"value\": \"9.21\",\r\n  \"operand\": \">\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Number rule with invalid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " [{\r\n  \"fieldId\": 11,\r\n  \"value\": \"invalidnumber\",\r\n  \"operand\": \">\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Percent rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " [{\r\n  \"fieldId\": 35,\r\n  \"value\": \"0.15\",\r\n  \"operand\": \">\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Percent rule with invalid value(0-1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " [{\r\n  \"fieldId\": 35,\r\n  \"value\": \"119.22\",\r\n  \"operand\": \">\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Text rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json()[0].id){\r",
											"   pm.environment.set('ruleId', pm.response.json()[0].id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 19,\r\n  \"value\": \"start\",\r\n  \"operand\": \"BEGINS WITH\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Text rule with invalid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 19,\r\n  \"value\": \" \",\r\n  \"operand\": \"BEGINS WITH\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "create rule with not owner view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 18,\r\n  \"values\": [\r\n   \"PatType Code\"\r\n  ],\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/1/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "create rule with not found view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('ruleId', pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 18,\r\n  \"values\": [\r\n   \"PatType Code\"\r\n  ],\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/1111111/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"1111111",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "create rule with negative view id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('ruleId', pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 18,\r\n  \"values\": [\r\n   \"PatType Code\"\r\n  ],\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/-1/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"-1",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "create rule with negative field id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": -1,\r\n  \"values\": [\r\n   \"PatType Code\"\r\n  ],\r\n  \"operand\":\"IN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "create rule with invalid beginrange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n  \"fieldId\": 5,\r\n  \"beginRange\": \"01/01/1900 too long too long too long too long\",\r\n  \"endRange\": \"12/31/1986\",\r\n  \"operand\": \"BETWEEN\"\r\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/views/{{viewId}}/rules",
									"host": [
										"{{url}}"
									],
									"path": [
										"views",
										"{{viewId}}",
										"rules"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Worklist Layout",
			"item": [
				{
					"name": "POST /worklist/layouts",
					"item": [
						{
							"name": "/worklist/layouts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.environment.set(\"worklistLayoutId\", response.id);\r",
											"        pm.environment.set(\"worklistLayoutColumnId-1\", response.columns[0].id);\r",
											"        pm.environment.set(\"worklistLayoutColumnId-2\", response.columns[1].id);\r",
											"        pm.environment.set(\"worklistLayoutColumnId-3\", response.columns[2].id);\r",
											"        pm.environment.set(\"worklistLayoutColumnId-4\", response.columns[3].id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout 1\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/worklist/layouts 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.environment.set(\"worklistLayoutId-2\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout 2\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The Name field is required.The Columns field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with exist name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout with name='layout 1' exists in database\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout 1\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with long name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field Name must be a string with a maximum length of 250.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"namenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamename\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with long description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field Description must be a string with a maximum length of 275.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"namenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamename\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The Name field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with invalid isDefault",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Boolean'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": \"\",\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with empty columns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Columns array cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with empty column values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The FieldName field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with invalid column location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Int32'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"name 1\",\r\n            \"location\": \"\",\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with invalid column width",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Int32'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"name 1\",\r\n            \"location\": 10,\r\n            \"width\": \"\",\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with invalid column isVisible",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Boolean'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"name 1\",\r\n            \"location\": 10,\r\n            \"width\": 5,\r\n            \"isVisible\": \"\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with same column location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Columns locations must be unique\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 1,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 2,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 2,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with not found column name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Columns names: InValid are not valid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"InValid\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with duplicated field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Columns field names must be unique\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create worklist layout with no visible column",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"At least one column must be visible\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 1,\r\n            \"width\": 9,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 2,\r\n            \"width\": 30,\r\n            \"isVisible\": false\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /worklist/layouts/{layoutId}",
					"item": [
						{
							"name": "/worklist/layouts/{layoutId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout edited\",\r\n    \"description\": \"description edited\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"id\": {{worklistLayoutColumnId-2}},\r\n            \"fieldName\": \"AdjTotalDays\",\r\n            \"location\": 1,\r\n            \"width\": 16,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"id\": {{worklistLayoutColumnId-3}},\r\n            \"fieldName\": \"Name_AuditorID\",\r\n            \"location\": 2,\r\n            \"width\": 90,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"id\": {{worklistLayoutColumnId-4}},\r\n            \"fieldName\": \"AllowableDiff\",\r\n            \"location\": 3,\r\n            \"width\": 30,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/worklist/layouts/{layoutId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.expect(response.columns).to.have.length(4);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with not owned worklist layout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout by id='1' not belongs to the current user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout edited\",\r\n    \"description\": \"description edited\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"id\": {{worklistLayoutColumnId-2}},\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 18,\r\n            \"width\": 16,\r\n            \"isVisible\": false\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with not found worklist layout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout by id='999999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout edited\",\r\n    \"description\": \"description edited\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"id\": {{worklistLayoutColumnId-2}},\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 18,\r\n            \"width\": 16,\r\n            \"isVisible\": false\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/999999",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with negative layoutId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"layoutId should be positive. (Parameter 'layoutId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout edited\",\r\n    \"description\": \"description edited\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"id\": {{worklistLayoutColumnId-2}},\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 18,\r\n            \"width\": 16,\r\n            \"isVisible\": false\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/-2",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"-2"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with exist name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout with name='layout 2' exists in database\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"layout 2\",\r\n    \"description\": \"description edited\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"id\": {{worklistLayoutColumnId-2}},\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 18,\r\n            \"width\": 16,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with long name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field Name must be a string with a maximum length of 250.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"namenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamename\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 10,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with long description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field Description must be a string with a maximum length of 275.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"namenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamename\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 10,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The Name field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": true,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 10,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with invalid isDefault",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Boolean'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": \"\",\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 10,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with empty columns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Columns array cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with empty column values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The FieldName field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with invalid column location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Int32'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": \"\",\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with invalid column width",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Int32'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 10,\r\n            \"width\": \"\",\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with invalid column isVisible",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Error converting value {null} to type 'System.Boolean'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"PatientPaymentDate\",\r\n            \"location\": 10,\r\n            \"width\": 5,\r\n            \"isVisible\": \"\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with same column location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Columns locations must be unique\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"ServiceCode\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 1,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 2,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 2,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update worklist layout with not found column name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.contains(\"Columns names: InValid are not valid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"new\",\r\n    \"description\": \"description 1\",\r\n    \"isDefault\": false,\r\n    \"columns\": [\r\n        {\r\n            \"fieldName\": \"InValid\",\r\n            \"location\": 1,\r\n            \"width\": 5,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"Outlier\",\r\n            \"location\": 2,\r\n            \"width\": 6,\r\n            \"isVisible\": false\r\n        },\r\n        {\r\n            \"fieldName\": \"DRG\",\r\n            \"location\": 3,\r\n            \"width\": 9,\r\n            \"isVisible\": true\r\n        },\r\n        {\r\n            \"fieldName\": \"CalcCode\",\r\n            \"location\": 4,\r\n            \"width\": 30,\r\n            \"isVisible\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/layouts",
					"item": [
						{
							"name": "/worklist/layouts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/layouts/{layoutId}",
					"item": [
						{
							"name": "/worklist/layouts/{layoutId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.expect(response.id).to.eq(pm.environment.get('worklistLayoutId'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get worklist layout with not owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout by id='1' not belongs to the current user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get worklist layout with negative layoutId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"layoutId should be positive. (Parameter 'layoutId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get worklist layout with not found layoutId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout by id='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/9999",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE /worklist/layouts/{layoutId}",
					"item": [
						{
							"name": "/worklist/layouts/{layoutId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId-2}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete worklist layout with not owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout by id='1' not belongs to the current user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete worklist layout with negative layoutId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"layoutId should be positive. (Parameter 'layoutId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete worklist layout with not found layoutId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(`Worklist layout by id='${pm.environment.get('worklistLayoutId-2')}' not found`);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/layouts/{{worklistLayoutId-2}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"layouts",
										"{{worklistLayoutId-2}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Worklist Account",
			"item": [
				{
					"name": "GET /worklist/accounts/{patientId}/revCpt",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/revCpt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/revCpt",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"revCpt"
									]
								}
							},
							"response": []
						},
						{
							"name": "get revCpt codes with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/revCpt",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"revCpt"
									]
								}
							},
							"response": []
						},
						{
							"name": "get revCpt codes with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/revCpt",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"revCpt"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /worklist/accounts/{patientId}/chargeCodes",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/chargeCodes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.environment.set(\"chargeCodeId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge code 1\",\r\n    \"revenueCode\": \"revenue\",\r\n    \"deniedCharges\": 41654.5,\r\n    \"description\": \"description\",\r\n    \"cptCode\": \"cpt code\",\r\n    \"nonCoveredCharges\": 56.22,\r\n    \"transactionId\": \"123\",\r\n    \"units\": 452,\r\n    \"nonBilledCharges\": 71.1,\r\n    \"serviceDate\": \"12.12.2012\",\r\n    \"charges\": 85,\r\n    \"cost\": 985.125\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with not found patient id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The ChargeCode field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with long charge code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field ChargeCode must be a string with a maximum length of 30.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with long revenue code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field RevenueCode must be a string with a maximum length of 10.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"aaaaaaaaaaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with long description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field Description must be a string with a maximum length of 100.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"rev code\",\r\n    \"description\": \"descdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdesc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with long cpt code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field CptCode must be a string with a maximum length of 10.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"rev code\",\r\n    \"description\": \"desc\",\r\n    \"cptCode\": \"codecodecode\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create charge code with long transaction id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field TransactionId must be a string with a maximum length of 50.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"rev code\",\r\n    \"description\": \"desc\",\r\n    \"cptCode\": \"code\",\r\n    \"transactionId\": \"trans id trans id trans id trans id trans id trans id trans id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/chargeCodes",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/chargeCodes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "get charge codes with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"chargeCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "get charge codes with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/chargeCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"chargeCodes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /worklist/accounts/{patientId}/chargeCodes/{chargeCode}",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/chargeCodes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge code 1\",\r\n    \"revenueCode\": \"revenue\",\r\n    \"deniedCharges\": 41654.5,\r\n    \"description\": \"description\",\r\n    \"cptCode\": \"cpt code\",\r\n    \"nonCoveredCharges\": 56.22,\r\n    \"transactionId\": \"123\",\r\n    \"units\": 452,\r\n    \"nonBilledCharges\": 71.1,\r\n    \"serviceDate\": \"12.12.2012\",\r\n    \"charges\": 85,\r\n    \"cost\": 985.125\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with negative chargeCodeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"chargeCodeId should be positive. (Parameter 'chargeCodeId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with not found chargeCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Charge code by patientId='66106024' and id='999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/999",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"999"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"charge\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/999/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"999",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The ChargeCode field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with long charge code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field ChargeCode must be a string with a maximum length of 30.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with long revenue code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field RevenueCode must be a string with a maximum length of 10.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"aaaaaaaaaaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with long description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field Description must be a string with a maximum length of 100.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"rev code\",\r\n    \"description\": \"descdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdescdesc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with long cpt code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field CptCode must be a string with a maximum length of 10.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"rev code\",\r\n    \"description\": \"desc\",\r\n    \"cptCode\": \"codecodecode\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update charge code with long transaction id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The field TransactionId must be a string with a maximum length of 50.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chargeCode\": \"code\",\r\n    \"revenueCode\": \"rev code\",\r\n    \"description\": \"desc\",\r\n    \"cptCode\": \"code\",\r\n    \"transactionId\": \"trans id trans id trans id trans id trans id trans id trans id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE /worklist/accounts/{patientId}/chargeCodes/{chargeCodeId}",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/chargeCodes/{chargeCodeId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete charge codes with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete charge codes with not found chargeCodeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Charge code by patientId='66106024' and id='999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/chargeCodes/999",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"chargeCodes",
										"999"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete charge codes with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/chargeCodes/{{chargeCodeId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"chargeCodes",
										"{{chargeCodeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/claimsHistory",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/claimsHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/claimsHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"claimsHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "get claims history with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/claimsHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"claimsHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "get claims history with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/claimsHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"claimsHistory"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/professionalClaims",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/professionalClaims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{actualPatientId}}/professionalClaims",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{actualPatientId}}",
										"professionalClaims"
									]
								}
							},
							"response": []
						},
						{
							"name": "get professional claims with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/professionalClaims",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"professionalClaims"
									]
								}
							},
							"response": []
						},
						{
							"name": "get professional claims with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/professionalClaims",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"professionalClaims"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts",
					"item": [
						{
							"name": "/worklist/accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?viewId=2&auditor=1&followUp=1&status=1&accountAge=1&hiddenRecords=1&sortBy=ActualPatientID&sortOrder=Asc&offset=0&limit=15&layoutId={{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "viewId",
											"value": "2"
										},
										{
											"key": "auditor",
											"value": "1"
										},
										{
											"key": "followUp",
											"value": "1"
										},
										{
											"key": "status",
											"value": "1"
										},
										{
											"key": "accountAge",
											"value": "1"
										},
										{
											"key": "hiddenRecords",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "ActualPatientID"
										},
										{
											"key": "sortOrder",
											"value": "Asc"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "{{worklistLayoutId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search with nonexistent view id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Views by id='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?viewId=9999&auditor=1&followUp=1&status=1&accountAge=1&hiddenRecords=1&sortBy=ActualPatientID&sortOrder=Asc&offset=0&limit=15&layoutId={{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "viewId",
											"value": "9999"
										},
										{
											"key": "auditor",
											"value": "1"
										},
										{
											"key": "followUp",
											"value": "1"
										},
										{
											"key": "status",
											"value": "1"
										},
										{
											"key": "accountAge",
											"value": "1"
										},
										{
											"key": "hiddenRecords",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "ActualPatientID"
										},
										{
											"key": "sortOrder",
											"value": "Asc"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "{{worklistLayoutId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search with not owned view id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Views by id='1' not belongs to the current user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?viewId=1&auditor=1&followUp=1&status=1&accountAge=1&hiddenRecords=1&sortBy=ActualPatientID&sortOrder=Asc&offset=0&limit=15&layoutId={{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "viewId",
											"value": "1"
										},
										{
											"key": "auditor",
											"value": "1"
										},
										{
											"key": "followUp",
											"value": "1"
										},
										{
											"key": "status",
											"value": "1"
										},
										{
											"key": "accountAge",
											"value": "1"
										},
										{
											"key": "hiddenRecords",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "ActualPatientID"
										},
										{
											"key": "sortOrder",
											"value": "Asc"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "{{worklistLayoutId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search with missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"The Status field is required.The ViewId field is required.The Auditor field is required.The FollowUp field is required.The AccountAge field is required.The HiddenRecords field is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?sortBy=ActualPatientID&sortOrder=Asc&offset=0&limit=15&layoutId={{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "ActualPatientID"
										},
										{
											"key": "sortOrder",
											"value": "Asc"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "{{worklistLayoutId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search with invalid sortBy value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Sort By='invalid' is not valid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?viewId=2&auditor=1&followUp=1&status=1&accountAge=1&hiddenRecords=1&sortBy=invalid&sortOrder=Asc&offset=0&limit=15&layoutId={{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "viewId",
											"value": "2"
										},
										{
											"key": "auditor",
											"value": "1"
										},
										{
											"key": "followUp",
											"value": "1"
										},
										{
											"key": "status",
											"value": "1"
										},
										{
											"key": "accountAge",
											"value": "1"
										},
										{
											"key": "hiddenRecords",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "invalid"
										},
										{
											"key": "sortOrder",
											"value": "Asc"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "{{worklistLayoutId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search with invalid sortOrder value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Sort Order='invalid' is not valid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?viewId=9999&auditor=1&followUp=1&status=1&accountAge=1&hiddenRecords=1&sortBy=ActualPatientID&sortOrder=invalid&offset=0&limit=15&layoutId={{worklistLayoutId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "viewId",
											"value": "9999"
										},
										{
											"key": "auditor",
											"value": "1"
										},
										{
											"key": "followUp",
											"value": "1"
										},
										{
											"key": "status",
											"value": "1"
										},
										{
											"key": "accountAge",
											"value": "1"
										},
										{
											"key": "hiddenRecords",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "ActualPatientID"
										},
										{
											"key": "sortOrder",
											"value": "invalid"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "{{worklistLayoutId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search with not owned layoutId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout by id='1' not belongs to the current user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?viewId=9999&auditor=1&followUp=1&status=1&accountAge=1&hiddenRecords=1&sortBy=ActualPatientID&sortOrder=Asc&offset=0&limit=15&layoutId=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "viewId",
											"value": "9999"
										},
										{
											"key": "auditor",
											"value": "1"
										},
										{
											"key": "followUp",
											"value": "1"
										},
										{
											"key": "status",
											"value": "1"
										},
										{
											"key": "accountAge",
											"value": "1"
										},
										{
											"key": "hiddenRecords",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "ActualPatientID"
										},
										{
											"key": "sortOrder",
											"value": "Asc"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search with not found layoutId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Worklist layout by id='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts?viewId=9999&auditor=1&followUp=1&status=1&accountAge=1&hiddenRecords=1&sortBy=ActualPatientID&sortOrder=Asc&offset=0&limit=15&layoutId=9999",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts"
									],
									"query": [
										{
											"key": "viewId",
											"value": "9999"
										},
										{
											"key": "auditor",
											"value": "1"
										},
										{
											"key": "followUp",
											"value": "1"
										},
										{
											"key": "status",
											"value": "1"
										},
										{
											"key": "accountAge",
											"value": "1"
										},
										{
											"key": "hiddenRecords",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "ActualPatientID"
										},
										{
											"key": "sortOrder",
											"value": "Asc"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "layoutId",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/contactInfo",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/contactInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/contactInfo",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"contactInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "get contact info with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/contactInfo",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"contactInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "get contactInfo with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/contactInfo",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"contactInfo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH /worklist/accounts/{patientId}/contactInfo",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/contactInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"facilityName\": \"My Facility\",\r\n    \"taxId\": \"123\",\r\n    \"npi\": null,\r\n    \"payeeName\": \"Patient23, Test\",\r\n    \"payerPhone\": null,\r\n    \"subscriberId\": \"SUBID 23\",\r\n    \"insuredSsn\": null,\r\n    \"insuredGroupName\": \"INS GRP I\",\r\n    \"patientName\": \"Patient23, Test\",\r\n    \"dateOfBirth\": \"2016-01-29T00:00:00\",\r\n    \"accountNumber\": \"66106024\",\r\n    \"totalCharges\": 995.0,\r\n    \"insuredName\": \"Insured23, Name\",\r\n    \"admitDate\": \"2016-10-25T00:00:00\",\r\n    \"dischargeDate\": \"2016-10-25T00:00:00\",\r\n    \"patientType\": 16871,\r\n    \"medicalRecordNo\": \"23\",\r\n    \"socialSecurityNo\": \"\",\r\n    \"auditStatus\": \"Closed\",\r\n    \"committedAmount\": null,\r\n    \"argument\": null,\r\n    \"auditor\": null,\r\n    \"varCatSuggestion\": \"(none)\",\r\n    \"pursuingReason\": null,\r\n    \"followUpDate\": null,\r\n    \"eventDate\": \"2021-10-09T18:31:01.35\",\r\n    \"startDate\": null,\r\n    \"agency\": null,\r\n    \"responsibility\": \"Payer 1\",\r\n    \"type\": null,\r\n    \"duration\": 0,\r\n    \"note\": \"my notes\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/contactInfo",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"contactInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "update contact info with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"facilityName\": \"My Facility\",\r\n    \"taxId\": \"123\",\r\n    \"npi\": null,\r\n    \"payerName\": \"Payer 2000007\",\r\n    \"payerPhone\": null,\r\n    \"subscriberId\": \"SUBID 23\",\r\n    \"insuredSsn\": null,\r\n    \"insuredGroupName\": \"INS GRP I\",\r\n    \"patientName\": \"Patient23, Test\",\r\n    \"dateOfBirth\": \"2016-01-29T00:00:00\",\r\n    \"accountNumber\": null,\r\n    \"totalCharges\": 995.0,\r\n    \"insuredName\": \"Insured23, Name\",\r\n    \"admitDate\": \"2016-10-25T00:00:00\",\r\n    \"dischargeDate\": \"2016-10-25T00:00:00\",\r\n    \"patientType\": 1,\r\n    \"medicalRecordNo\": \"23\",\r\n    \"socialSecurityNo\": null,\r\n    \"auditStatus\": null,\r\n    \"reviewCategory\": null,\r\n    \"varianceCategory\": null,\r\n    \"closedResult\": null,\r\n    \"committedAmount\": 1,\r\n    \"assignedReviewer\": 1,\r\n    \"argument\": null,\r\n    \"auditor\": null,\r\n    \"reviewReason\": null,\r\n    \"varCatSuggestion\": null,\r\n    \"closedReason\": null,\r\n    \"pursuingReason\": null,\r\n    \"followUpDate\": \"2021-10-10\",\r\n    \"eventDate\": \"2021-10-10\",\r\n    \"startDate\": \"2021-10-10\",\r\n    \"agency\": null,\r\n    \"reviewStage\": null,\r\n    \"responsibility\": null,\r\n    \"type\": null,\r\n    \"duration\": 0,\r\n    \"note\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/contactInfo",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"contactInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "update contactInfo with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"facilityName\": \"My Facility\",\r\n    \"taxId\": \"123\",\r\n    \"npi\": null,\r\n    \"payerName\": \"Payer 2000007\",\r\n    \"payerPhone\": null,\r\n    \"subscriberId\": \"SUBID 23\",\r\n    \"insuredSsn\": null,\r\n    \"insuredGroupName\": \"INS GRP I\",\r\n    \"patientName\": \"Patient23, Test\",\r\n    \"dateOfBirth\": \"2016-01-29T00:00:00\",\r\n    \"accountNumber\": null,\r\n    \"totalCharges\": 995.0,\r\n    \"insuredName\": \"Insured23, Name\",\r\n    \"admitDate\": \"2016-10-25T00:00:00\",\r\n    \"dischargeDate\": \"2016-10-25T00:00:00\",\r\n    \"patientType\": 1,\r\n    \"medicalRecordNo\": \"23\",\r\n    \"socialSecurityNo\": null,\r\n    \"auditStatus\": null,\r\n    \"reviewCategory\": null,\r\n    \"varianceCategory\": null,\r\n    \"closedResult\": null,\r\n    \"committedAmount\": 1,\r\n    \"assignedReviewer\": 1,\r\n    \"argument\": null,\r\n    \"auditor\": null,\r\n    \"reviewReason\": null,\r\n    \"varCatSuggestion\": null,\r\n    \"closedReason\": null,\r\n    \"pursuingReason\": null,\r\n    \"followUpDate\": \"2021-10-10\",\r\n    \"eventDate\": \"2021-10-10\",\r\n    \"startDate\": \"2021-10-10\",\r\n    \"agency\": null,\r\n    \"reviewStage\": null,\r\n    \"responsibility\": null,\r\n    \"type\": null,\r\n    \"duration\": 0,\r\n    \"note\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/contactInfo",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"contactInfo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/eor",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/eor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/eor",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"eor"
									]
								}
							},
							"response": []
						},
						{
							"name": "get eor with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/eor",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"eor"
									]
								}
							},
							"response": []
						},
						{
							"name": "get eor with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/eor",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"eor"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/detailReimb",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/detailReimb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/detailReimb",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"detailReimb"
									]
								}
							},
							"response": []
						},
						{
							"name": "get detail reimb with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/detailReimb",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"detailReimb"
									]
								}
							},
							"response": []
						},
						{
							"name": "get detail reimb with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/detailReimb",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"detailReimb"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/auditStatusHistory",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/auditStatusHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/auditStatusHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"auditStatusHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "get audit status history with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/auditStatusHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"auditStatusHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "get audit status history with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/detailReimb",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"detailReimb"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/payments",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "get payments with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "get payments with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /worklist/accounts/{patientId}/payments",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paidBy\": \"Payer 1\",\r\n    \"paymentType\": \"Actual Payment\",\r\n    \"importDate\": \"2021-10-10\",\r\n    \"postingDate\": \"2021-10-10\",\r\n    \"amount\": 100,\r\n    \"excludedAmount\": 100,\r\n    \"adjustCode\": 5013,\r\n    \"adjustCodeDescription\": \"INSURANCE PAYMENT (INSURANCE)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create payment with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paidBy\": \"Payer 1\",\r\n    \"paymentType\": \"Actual Payment\",\r\n    \"importDate\": \"2021-10-10\",\r\n    \"postingDate\": \"2021-10-10\",\r\n    \"amount\": 100,\r\n    \"excludedAmount\": 100,\r\n    \"adjustCode\": 5013,\r\n    \"adjustCodeDescription\": \"INSURANCE PAYMENT (INSURANCE)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create payment with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paidBy\": \"Payer 1\",\r\n    \"paymentType\": \"Actual Payment\",\r\n    \"importDate\": \"2021-10-10\",\r\n    \"postingDate\": \"2021-10-10\",\r\n    \"amount\": 100,\r\n    \"excludedAmount\": 100,\r\n    \"adjustCode\": 5013,\r\n    \"adjustCodeDescription\": \"INSURANCE PAYMENT (INSURANCE)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/payments/{payerNumber}",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/payments/{payerNumber}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get payment details with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/payments/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get payment details with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/payments/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"payments",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE /worklist/accounts/{patientId}/payments/{payerNumber}",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paidBy\": \"Other Payer\",\r\n    \"paymentType\": \"Miscellaneous\",\r\n    \"importDate\": \"2021-10-10\",\r\n    \"postingDate\": \"2021-10-10\",\r\n    \"amount\": 100,\r\n    \"excludedAmount\": 100,\r\n    \"adjustCode\": 5013,\r\n    \"adjustCodeDescription\": \"INSURANCE PAYMENT (INSURANCE)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "/worklist/accounts/{patientId}/payments/{payerNumber}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete payment details with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/payments/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete payment details with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/payments/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete payment details with not other payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Other payment with patientId='5279364' and payerNumber='1' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/payments/other",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paidBy\": \"Other Payer\",\r\n    \"paymentType\": \"Miscellaneous\",\r\n    \"importDate\": \"2021-10-10\",\r\n    \"postingDate\": \"2021-10-10\",\r\n    \"amount\": 100,\r\n    \"excludedAmount\": 100,\r\n    \"adjustCode\": 5013,\r\n    \"adjustCodeDescription\": \"INSURANCE PAYMENT (INSURANCE)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "/worklist/accounts/{patientId}/payments/other",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments/other",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments",
										"other"
									]
								}
							},
							"response": []
						},
						{
							"name": "get other payments with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/payments/other",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"payments",
										"other"
									]
								}
							},
							"response": []
						},
						{
							"name": "get other payments with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/payments/other",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"payments",
										"other"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH /worklist/accounts/{patientId}/payments/other",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/payments/other",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": \"Other Payer\",\r\n    \"incrementName\": \"Miscellaneous\",\r\n    \"accountNumber\": \"66106024\",\r\n    \"adjustCode\": \"9999\",\r\n    \"payerId\": \"1111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments/other",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments",
										"other"
									]
								}
							},
							"response": []
						},
						{
							"name": "update other payments with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": \"Other Payer\",\r\n    \"incrementName\": \"Actual Payment\",\r\n    \"accountNumber\": \"123456\",\r\n    \"adjustCode\": \"9999\",\r\n    \"payerId\": \"1111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/payments/other",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"payments",
										"other"
									]
								}
							},
							"response": []
						},
						{
							"name": "update other payments with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": \"Other Payer\",\r\n    \"incrementName\": \"Actual Payment\",\r\n    \"accountNumber\": \"123456\",\r\n    \"adjustCode\": \"9999\",\r\n    \"payerId\": \"1111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/payments/other",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"payments",
										"other"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /worklist/accounts/{patientId}/payments/{payerNumber}/commit",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/payments/{payerNumber}/commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments/5/commit",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments",
										"5",
										"commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit payments with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/payments/5/commit",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"payments",
										"5",
										"commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit payments with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/payments/5/commit",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"payments",
										"5",
										"commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit payments with not other payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Other payment with patientId='5279364' and payerNumber='1' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/payments/1/commit",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"payments",
										"1",
										"commit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /worklist/accounts/{patientId}/icdCodes",
					"item": [
						{
							"name": "/worklist/accounts/{patientId}/icdCodes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/{{patientId}}/icdCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"{{patientId}}",
										"icdCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "get icd codes history with negative patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"patientId should be positive. (Parameter 'patientId')\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/-1/icdCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"-1",
										"icdCodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "get icd codes history with not found patientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eq(\"Patient with patientId='9999' not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/worklist/accounts/9999/icdCodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"worklist",
										"accounts",
										"9999",
										"icdCodes"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}